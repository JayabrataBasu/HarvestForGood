"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta
import dj_database_url

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Railway deployment detection
RAILWAY_ENVIRONMENT = os.getenv('RAILWAY_ENVIRONMENT')
IS_RAILWAY = RAILWAY_ENVIRONMENT is not None

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', os.getenv('SECRET_KEY', 'django-insecure-development-key-change-me'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Database configuration with Railway support
DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    raise Exception("DATABASE_URL environment variable is required for PostgreSQL. No fallback to SQLite.")

# Allowed hosts configuration
if IS_RAILWAY:
    # Railway provides RAILWAY_PUBLIC_DOMAIN and RAILWAY_STATIC_URL
    ALLOWED_HOSTS = [
        '127.0.0.1',
        'localhost',
        'testserver',
        '.railway.app',  # Railway subdomain
        '.up.railway.app',  # Railway legacy domain
        os.getenv('RAILWAY_PUBLIC_DOMAIN', ''),
        os.getenv('RAILWAY_STATIC_URL', '').replace('https://', '').replace('http://', ''),
    ]
    # Remove empty strings and clean up
    ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS if host and host.strip()]
    
    # Add custom domains from environment
    custom_hosts = os.getenv('ALLOWED_HOSTS', '').split(',')
    ALLOWED_HOSTS.extend([host.strip() for host in custom_hosts if host.strip()])
else:
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'testserver']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'django_filters',
    'taggit',
    'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'django_extensions',
    
    # Local apps
    'apps.utils',  # Add this line
    'apps.users',
    'apps.academic',
    'apps.forum',
    'apps.security',
    'apps.research',
    'apps.forums',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # MOVED TO TOP - CRITICAL FOR CORS
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add whitenoise here if IS_RAILWAY
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'apps.security.middleware.IPSecurityMiddleware',
]

SITE_ID = 1


# Email settings
# Email settings - Update to use Gmail SMTP for reliable delivery
if IS_RAILWAY or not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)
    
    # Add timeout settings for better reliability
    EMAIL_TIMEOUT = 30
    EMAIL_USE_SSL = False  # We're using TLS instead
else:
    # Development settings
    EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
    EMAIL_HOST = os.getenv('EMAIL_HOST')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

# Authentication settings
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # Changed to optional for easier testing
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Changed from ACCOUNT_LOGIN_METHODS
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Security settings for production - UPDATED TO FIX REDIRECT LOOP
if IS_RAILWAY or not DEBUG:
    # DO NOT force SSL redirect - Railway handles HTTPS termination
    SECURE_SSL_REDIRECT = False  # Changed from True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # Disable HSTS for now to avoid redirect issues
    SECURE_HSTS_SECONDS = 0  # Changed from 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False  # Changed from True
    SECURE_HSTS_PRELOAD = False  # Changed from True
    CSRF_COOKIE_SAMESITE = 'Lax'  # Changed from 'Strict'
    SESSION_COOKIE_SAMESITE = 'Lax'  # Changed from 'Strict'
    X_FRAME_OPTIONS = 'DENY'
    
    # Additional production security
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
else:
    # Development settings
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'SAMEORIGIN'  # More permissive for development

# JWT settings with environment-based security
REST_AUTH = {
    'USER_DETAILS_SERIALIZER': 'apps.users.serializers.UserSerializer',
    'REGISTER_SERIALIZER': 'apps.users.serializers.CustomRegisterSerializer',
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'my-app-auth',
    'JWT_AUTH_REFRESH_COOKIE': 'my-refresh-token',
    'JWT_AUTH_SECURE': IS_RAILWAY,  # Secure cookies in production
}

# Common security settings - keep basic XSS protection
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# HSTS settings - disabled for development
SECURE_HSTS_SECONDS = 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False

# Cookie security - keep HttpOnly but make SameSite Lax
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'

# Session security - relaxed for testing
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 86400  # 24 hours for easier testing

# Logging - make it less verbose
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'WARNING',  # Only show warnings and above
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# File Upload Settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # 2.5 MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # 2.5 MB
MAX_CONTENT_LENGTH = 5242880  # 5 MB

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates', BASE_DIR / 'apps/users/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # This is correct for public access
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1000/hour',
        'user': '2000/hour',
        'forum_posts': '200/hour',
        'auth_attempts': '20/hour',
        'dj_rest_auth': '20/min',
    }
}

REST_USE_JWT = True
JWT_AUTH_COOKIE = 'my-app-auth'
JWT_AUTH_REFRESH_COOKIE = 'my-refresh-token'

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Security Settings - paths that don't require authentication
API_SIGNATURE_TIMEOUT = 300  # 5 minutes in seconds
API_EXCLUDED_PATHS = [
    '/api/token/',
    '/api/users/register/',
    '/api/token/refresh/',
    '/api/auth/registration/',
    '/api/users/password/reset/',
    '/api/users/password-reset-confirm/',
    '/api/users/verify-email/',
    '/api/users/profile/',
    '/api/auth/logout/',
    '/api/forum/posts/',  # Singular version - already included
    '/api/forum/posts',   # Without trailing slash
    '/api/forums/posts/', # Plural version - add this  
    '/api/forums/posts',  # Without trailing slash
    '/api/forum/comments/',
    '/api/forum/comments',
    '/api/forums/comments/',
    '/api/forums/comments',
    '/api/research/papers/',  # Allow anonymous users to view research papers
    '/api/research/papers',   # Also include without trailing slash
    '/api/research/keywords/',  # Allow anonymous users to view keywords
    '/api/research/keywords',   # Also include without trailing slash
    '/admin/',  # Allow Django admin access
    '/admin',   # Without trailing slash
]

# Django Admin Configuration
ADMIN_SITE_HEADER = "Harvest For Good Administration"
ADMIN_SITE_TITLE = "Harvest For Good Admin"
ADMIN_INDEX_TITLE = "Welcome to Harvest For Good Administration"

WSGI_APPLICATION = 'core.wsgi.application'

# CORS settings - COMPLETELY REWRITTEN FOR PRODUCTION
if IS_RAILWAY or not DEBUG:
    # Enable CORS for production
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = [
        'https://harvestforgood.vercel.app',
        'https://harvestforgood.com',
        'https://www.harvestforgood.com',
        # Add more domains if needed
    ]
    
    # Set CORS headers properly
    CORS_ALLOW_CREDENTIALS = True
    CORS_PREFLIGHT_MAX_AGE = 86400
    
    CORS_ALLOW_METHODS = [
        'DELETE',
        'GET',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
    ]
    
    CORS_ALLOW_HEADERS = [
        'accept',
        'accept-encoding',
        'authorization',
        'content-type',
        'dnt',
        'origin',
        'user-agent',
        'x-csrftoken',
        'x-requested-with',
        'cache-control',
        'pragma',
        'x-csrf-token',
    ]
    
    CORS_EXPOSE_HEADERS = [
        'content-type',
        'x-csrftoken',
    ]
    
    # CSRF settings for production
    CSRF_TRUSTED_ORIGINS = [
        'https://harvestforgood.vercel.app',
        'https://harvestforgood.com', 
        'https://www.harvestforgood.com',
        'https://harvestforgood-production.up.railway.app',
    ]
else:
    # Development CORS settings - ADD NEXT.JS DEFAULT PORT
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",  # Next.js default
        "http://127.0.0.1:3000", 
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 9,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
if IS_RAILWAY or not DEBUG:
    # Whitenoise is already in MIDDLEWARE above
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = True

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'