# Generated by Django 5.1.6 on 2025-04-26 15:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True
    
    dependencies = []
    
    operations = [
        migrations.RunSQL(
            # Check if tables already exist and only create them if they don't
            """
            DO $$
            BEGIN
                IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'research_author') THEN
                    CREATE TABLE research_author (
                        id bigserial NOT NULL PRIMARY KEY,
                        name character varying(100) NOT NULL
                    );
                END IF;
            
                IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'research_keywordcategory') THEN
                    CREATE TABLE research_keywordcategory (
                        id bigserial NOT NULL PRIMARY KEY,
                        name character varying(100) NOT NULL UNIQUE,
                        description text NOT NULL
                    );
                END IF;
                
                IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'research_keyword') THEN
                    CREATE TABLE research_keyword (
                        id bigserial NOT NULL PRIMARY KEY,
                        name character varying(100) NOT NULL UNIQUE,
                        category_id bigint NULL REFERENCES research_keywordcategory(id) ON DELETE SET NULL
                    );
                END IF;
                
                IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'research_researchpaper') THEN
                    CREATE TABLE research_researchpaper (
                        id bigserial NOT NULL PRIMARY KEY,
                        title character varying(255) NOT NULL,
                        slug character varying(255) NOT NULL UNIQUE,
                        abstract text NOT NULL,
                        publication_year integer NOT NULL,
                        journal character varying(255) NOT NULL,
                        doi character varying(100) NULL,
                        url character varying(200) NOT NULL,
                        methodology_type character varying(50) NOT NULL,
                        citation_count integer NOT NULL,
                        citation_trend character varying(20) NOT NULL,
                        created_at timestamp with time zone NOT NULL,
                        updated_at timestamp with time zone NOT NULL
                    );
                END IF;
                
                IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'research_researchpaper_authors') THEN
                    CREATE TABLE research_researchpaper_authors (
                        id bigserial NOT NULL PRIMARY KEY,
                        researchpaper_id bigint NOT NULL REFERENCES research_researchpaper(id) ON DELETE CASCADE,
                        author_id bigint NOT NULL REFERENCES research_author(id) ON DELETE CASCADE,
                        CONSTRAINT research_researchpaper_authors_unique UNIQUE (researchpaper_id, author_id)
                    );
                END IF;
                
                IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'research_researchpaper_keywords') THEN
                    CREATE TABLE research_researchpaper_keywords (
                        id bigserial NOT NULL PRIMARY KEY,
                        researchpaper_id bigint NOT NULL REFERENCES research_researchpaper(id) ON DELETE CASCADE,
                        keyword_id bigint NOT NULL REFERENCES research_keyword(id) ON DELETE CASCADE,
                        CONSTRAINT research_researchpaper_keywords_unique UNIQUE (researchpaper_id, keyword_id)
                    );
                END IF;
                
                -- Handle publication_date to publication_year conversion if needed
                IF EXISTS (
                    SELECT FROM information_schema.columns 
                    WHERE table_name = 'research_researchpaper' 
                    AND column_name = 'publication_date'
                    AND NOT EXISTS (
                        SELECT FROM information_schema.columns 
                        WHERE table_name = 'research_researchpaper' 
                        AND column_name = 'publication_year'
                    )
                ) THEN
                    ALTER TABLE research_researchpaper RENAME COLUMN publication_date TO publication_year;
                END IF;
            END $$;
            """,
            "-- No reverse SQL needed"
        ),
        
        # The following are dummy operations to make Django think these models exist
        # They won't actually create tables since we're handling that in the SQL above
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
            },
        ),
        migrations.CreateModel(
            name='KeywordCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Keyword Categories',
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='keywords', to='research.keywordcategory')),
            ],
            options={
                'verbose_name': 'Keyword',
                'verbose_name_plural': 'Keywords',
            },
        ),
        migrations.CreateModel(
            name='ResearchPaper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('abstract', models.TextField()),
                ('publication_year', models.IntegerField()),
                ('journal', models.CharField(blank=True, max_length=255)),
                ('doi', models.CharField(blank=True, max_length=100, null=True)),
                ('url', models.URLField(blank=True)),
                ('methodology_type', models.CharField(blank=True, max_length=50)),
                ('citation_count', models.IntegerField(default=0)),
                ('citation_trend', models.CharField(choices=[('increasing', 'Increasing'), ('decreasing', 'Decreasing'), ('stable', 'Stable')], default='stable', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('authors', models.ManyToManyField(related_name='papers', to='research.author')),
                ('keywords', models.ManyToManyField(related_name='papers', to='research.keyword')),
            ],
        ),
    ]
